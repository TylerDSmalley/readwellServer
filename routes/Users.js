const express = require("express");
const router = express.Router();
const { Users } = require("../models");
const bcrypt = require("bcrypt");
const { sign } = require('jsonwebtoken');
const { validateToken } = require("../middlewares/AuthMiddleware");
const { OAuth2Client } = require("google-auth-library");
const client = new OAuth2Client("413254531245-7ol21fbdp7k43o4pbdm8k0k3ip2bee07.apps.googleusercontent.com");


//USER ROUTES-------------------------
router.post("/", async (req, res) => {
    console.log(req.body);
    const { firstName, lastName, email, password, isLocal } = req.body;
    bcrypt.hash(password, 10).then((hash) => {
        Users.create({
            firstName: firstName,
            lastName: lastName,
            email: email,
            password: hash,
            isLocal: isLocal,
        });
        res.json("USER CREATED");
    });
});

router.post("/login", async (req, res) => {
    if (req.body.firstName) {
        let email = req.body.email;
        const foundUser = await Users.findOne({ where: { email: email } });

        if (!foundUser) {

            const newUser = await Users.create({
                firstName: req.body.firstName,
                lastName: req.body.lastName,
                email: req.body.email,
                password: "",
                isLocal: "no",
            })
        } else {
            const currUser = await Users.update({ firstName: req.body.firstName, lastName: req.body.lastName }, { where: { email: email } })
        }

        const user = await Users.findOne({ where: { email: email } });
        const accessToken = sign(
            { email: email, id: user.id, role: user.role },
            "importantsecret"
        ); //should use autogenerated passkey for security
        res.json({ token: accessToken, email: email, id: user.id });

    } else {
        const { email, password } = req.body;

        const user = await Users.findOne({ where: { email: email } });

        if (!user) res.json({ error: "User Doesn't Exist" });

        bcrypt.compare(password, user.password).then((match) => {
            if (!match)  {
                res.json({ error: "Wrong email And Password Combination" });
                return;
            }

            const accessToken = sign(
                { email: user.email, id: user.id },
                "importantsecret"
            ); //should use autogenerated passkey for security
            res.json({ token: accessToken, email: email, id: user.id });
        });
    }
});

router.get("/auth", validateToken, (req, res) => {
    res.json(req.user);
    console.log(req.user)
});

router.put("/changepassword", validateToken, async (req, res) => {
    const { oldPassword, newPassword } = req.body;
    const user = await Users.findOne({ where: { email: req.user.email } });

    bcrypt.compare(oldPassword, user.password).then(async (match) => {
        if (!match) res.json({ error: "Wrong Password Entered!" });

        bcrypt.hash(newPassword, 10).then((hash) => {
            Users.update(
                { password: hash },
                { where: { email: req.user.email } }
            );
            res.json("SUCCESS");
        });
    });
});

router.put("/userupdate", async (req, res) => {
    await Users.update({ firstName: req.body.firstName, lastName: req.body.lastName, email: req.body.email }, { where: { id: req.body.id } });
    res.json(req.body);
});

router.delete("/:userId", validateToken, async (req, res) => {
    const userId = req.params.userId;

    await Users.destroy({
        where: {
            id: userId,
        },
    });
    res.json("USER DELETED");
});

//Need to look at what values are available in payload..
//How do you handle create user if user is not in DB without password

//ROUTER FOR PROFILE PAGE/FRIEND SEARCH
// router.get("/basicinfo/:id", async (req, res) => {
//     const id = req.params.id;

//     const basicInfo = await Users.findByPk(id, {
//         attributes: { exclude: ["password"] },
//     });

//     res.json(basicInfo);
// });

module.exports = router;